from datetime import datetime
import datetime
import serial
from app001 import routes_all
from app001 import app
import time
import pymysql #MySQL 연결 위한 라이브러리

# 센서 통신 포트 설정
serialPort1 = "/dev/ttyUSB0"
ser = serial.Serial(serialPort1, baudrate=19200, timeout = 1)
ser.flushInput()

ack_send = ""

# 내부 사용 함수 목록 사작
def autorun_sensor(runcount,sensor_ids,cycle_time):
    countcheck = 0
    app.logger.info('1-1.auto run %s select sensor count %s Sensors Nos %s',runcount, len(sensor_ids), sensor_ids)
    today = datetime.datetime.now()
    years = today.year
    months = today.month
    days = today.day
    hours = today.hour
    minutes = today.minute
    seconds = today.second
    cnt = 0
    
    if runcount == 0: # 무한 루푸인경우
        while True:
            flags1 = routes_all.config_flag(1,1) # 오토모드 프래그 확인 (1 종료, 0은 계속) 튜플타입 디비에서 갖고 오도록 한것
            msg = 'auto_run_stop flags: {0}'.format(flags1[0])
            app.logger.info('auto_run_stop flags: %s',msg)
            if int(flags1[0]) == 1:
                break #종료해라
            for sensor_id in range(0, len(sensor_ids)):
                cnt = 0
                auto_send_cmd = 'idx{0},),{1:02d},{2:02d},{3:02d},{4:02d},{5:02d},{6:02d},etx'.format(sensor_ids[sensor_id], years, months, days, hours,minutes, seconds)
                app.logger.info('1-1-2.autorun sensor No %s count %s cmd %s',sensor_ids[sensor_id], countcheck, auto_send_cmd)
                ack_send = 'idx{0},1,etx'.format(sensor_ids[sensor_id])
                Serial_control(auto_send_cmd,ack_send)
            countcheck += 1     

            if int(flags1[0]) == 1:
                msg = 'auto run flag:{0}'.format(flags1[0])
                #SaveLog(msg)
                app.logger.info(msg)
                break

            cnt = 0
            #for i in range(0, cycle_time * 60): # 다음 센서 읽는 주기
            for i in range(0, 10): # 다음 센서 읽는 주기 2022-04-16
                time.sleep(1)
                cnt = cnt + 1
                app.logger.info(" Next Sensing Waiting time...%s",cnt)
        
    else: # 무한 루푸가 아닌 경우
        for run_cnt in range(0, runcount): #횟수를 정의한경우(1부터~)
            for sensor_id in range(0, len(sensor_ids)):
                auto_send_cmd = 'idx{0},),{1:02d},{2:02d},{3:02d},{4:02d},{5:02d},{6:02d},etx'.format(sensor_ids[sensor_id],years,months,days,hours,minutes,seconds)

                ack_send = 'idx{0},1,etx'.format(sensor_ids[sensor_id])
                Serial_control(auto_send_cmd,ack_send)
                msg = 'count run counter={0}'.format(run_cnt)
                cnt = 0
                #for i in range(0, cycle_time * 10): # 다음 센서 읽는 주기
                for i in range(0, 10): # 다음 센서 읽는 주기 2022-04-16
                    time.sleep(1)
                    cnt = cnt + 1
                    app.logger.info(" Next Sensing Waiting time...%s",cnt)
        msg = 'count run {0}'.format(runcount)
    msg = 'Sensor running stoped..{0}'.format(msg)
    routes_all.SaveLog(msg)
    #app.logger.info(msg)
    return msg
    
# SD카드에 있는 데이터 전송 요청 idx1,+,etx 
def recived_sd_data(sensor_ids):
    if  sensor_ids == 2:
        for sensor_id in range(0, sensor_ids):
            sd_send = 'idx{0},+,etx'.format(sensor_id)
            #app.logger.info('sd send data %s',sd_send)
            ack_send = 'idx{0},1,etx'.format(sensor_id)
            Serial_control(sd_send,ack_send)
    else:
        sd_send = 'idx{0},+,etx'.format(sensor_ids)
        #app.logger.info('sd send data %s',sd_send)
        ack_send = 'idx{0},1,etx'.format(sensor_ids)
        Serial_control(sd_send,ack_send)
        
# send_data, modes=auto(자동), sdcard(카드)
# 서버에서 요청하면 센서에서 데이터 주고, 서버는 받았다는 결과를 전송
# 자동모드 
# S: idx0,) ,년,월,일,시,분,etx -> C: idx0, 10자리 ~ ,etx -> S: idx0,1,etx

# 카드 읽기
# S: idx0,+,etx -> C: idx0, 10자리 ~ ,etx -> S: idx0,1,etx -> C: idx0, 10자리 ~ ,etx ->
# 데이터 없으면 C:idx0,2,etx  / 카드에러 C:idx0,3,etx
 
def Serial_control(send_data, ack_send):
    # 서버에서 명령어 전송(자동 모드와 SD 카드 읽기 명령)
    ser.write(send_data.encode("utf-8"))
    app.logger.info('1-2.Command writting %s',send_data )
    #펌프 동작 시간 값 읽어 오기 2022-04-16
    #in_times = routes_all.get_pump_run_time('I')
    #fi_times = routes_all.get_pump_run_time('P')
    #ex_times = routes_all.get_pump_run_time('E')
    
    #in_times = ''.join(in_times[0])
    #fi_times = ''.join(fi_times[0])
    #ex_times = ''.join(ex_times[0])
    in_times = 601 #2022-04-16
    fi_times = 11 #2022-04-16
    ex_times = 91 #2022-04-16
    #app.logger.info('in=%s, fi=%s, ex=%s',in_times, fi_times, ex_times)

    routes_all.SaveLog(send_data)
    strSend = send_data.split(',')
    # 30초 동안 흡기 펌프 돌려서 챔버에 약취로 채우는 작업을 하는 동안 대기
    idVal = strSend[0]
    id_value = idVal[-1]

    for i in range(0,int(in_times)):
        time.sleep(1)
        i += 1
        app.logger.info('Chambar inhaling odor Time waiting.. %s',i)
'''
2022-0416
    if id_value == '3':
        for i in range(0,int(in_times)):
            time.sleep(1)
            i += 1
            app.logger.info('Chambar inhaling odor Time waiting.. %s',i)
    else:
        for i in range(0,31):
            time.sleep(1)
            i += 1
            app.logger.info('Chambar inhaling odor Time waiting.. %s',i)
'''  
    result2 = []
    checktime = 0
    strStatus = ''
    while True:
        try:
            result1 = ser.readline().decode('utf-8') 
            if result1 != '':
                result2.append(result1)
                strResult = "".join(result2)
                app.logger.info('rev data: %s',strResult)
                
                # 센서에서의 응답 수신 만 존재 한다. 자동 모드는 응답 수신 없다.
                # 1. SD 카드 읽는 명령 후 서버에서 받은 결과 알려주면 응답 코드 저장 로그 없음(2), SD 카드 에러(3)
                if len(strResult) == 10: 
                    strResult = strResult.split(',')
                    app.logger.info('Recive Sensor Request Data split Length %s', len(strResult))
                    if len(strResult) == 3:
                        if strResult[1] == '2' and strSend[1] == '+' : # SD 카드 읽어 오는 명령어의 경우 읽을게 없으면 종료
                            strStatus = 'SD Data Not Found'
                        elif strResult[1] == '3' and strSend[1] == '+' : # SD 카드 불량 종료
                            strStatus = 'SD Data Write Error'
                        routes_all.SaveLog(strStatus)
                        break                       
                # 자동모드 데이터 수신, SD카드 데이터 수신
                elif len(strResult) >= 97:
                    strResult = strResult.split(',')
                    app.logger.info('Recive Sensing Data split Length %s', len(strResult))
                    if len(strResult) == 13 and strResult[0][:3] == 'idx' and strResult[12] == 'etx' :
                        routes_all.saveDB(strResult)
                        routes_all.SaveLog(ack_send)
                    if ack_send != "":
                        app.logger.info('Ack Send..data %s',ack_send)
                        ser.write(ack_send.encode("utf-8"))
                        routes_all.SaveLog(ack_send)
                        if strSend[1] != '+' : # SD 카드 읽는 명령어이 아닌경우 한번 받아 처리하고 종료
                            break
                        result1 = ""
                        result2.clear()
                        if checktime >= 110:  # 110초 동안 답이 없으면 종료
                            break
                        time.sleep(1)
                        checktime += 1
                        continue
                    else:
                        break
                else:
                    break
            else:  
                result1 = ""
        except UnicodeDecodeError:
            msg = 'Recive error UnicodeDecodeError'
            #app.logger.info('%s',msg)
            routes_all.SaveLog(msg)
            break
        #time.sleep(1)
        # 30초 동안 답이 없으면 종료
        if checktime >= 110:
            break
        time.sleep(1)
        checktime += 1
        app.logger.info('Wait..Recived_data step: %s',checktime)
    for i in range(0,int(ex_times)):
        time.sleep(1)
        i += 1
        app.logger.info('Chambar Clean Time: %s',i)
'''
2022-04-16
    if id_value == '3':    
        # 30초 동안 배기 펌프 돌려서 챔버를 크린 에어로 채우는 작업을 하는 동안 대기
        for i in range(0,int(ex_times)):
            time.sleep(1)
            i += 1
            app.logger.info('Chambar Clean Time: %s',i)
    else:
        for i in range(0,31):
            time.sleep(1)
            i += 1
            app.logger.info('Chambar Clean Time: %s',i)
'''
    msg = 'Serial_control function end'
    app.logger.info(msg)
    routes_all.SaveLog(msg)
